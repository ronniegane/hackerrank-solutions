package triplets

import "testing"

type testCase struct {
	name string
	r    int64
	arr  []int64
	want int64
}

var testCases = []testCase{
	{"1", 2, []int64{1, 2, 2, 4}, 2},
	{"2", 3, []int64{1, 3, 9, 9, 27, 81}, 6},
	{"3", 5, []int64{1, 5, 5, 25, 125}, 4},
	{"ones", 1, []int64{1, 1, 1, 1, 1}, 10},
	{"disordered", 2, []int64{1, 2, 1, 2, 4}, 3},
}

var benchmarks = []testCase{
	{"10Dupes", 1, []int64{127, 127, 127, 127, 127, 127, 127, 127, 127, 127}, 0},
	{"100Dupes", 1, []int64{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127}, 0},
	{"50", 3, []int64{1, 17, 80, 68, 5, 5, 58, 17, 38, 81, 26, 44, 38, 6, 12, 11, 37, 67, 70, 16, 19, 35, 71, 16, 32, 45, 7, 39, 2, 14, 16, 78, 82, 5, 18, 86, 61, 37, 12, 8, 27, 90, 13, 26, 57, 24, 36, 4, 52, 67}, 0},
	{"100", 3, []int64{1, 17, 80, 68, 5, 5, 58, 17, 38, 81, 26, 44, 38, 6, 12, 11, 37, 67, 70, 16, 19, 35, 71, 16, 32, 45, 7, 39, 2, 14, 16, 78, 82, 5, 18, 86, 61, 37, 12, 8, 27, 90, 13, 26, 57, 24, 36, 4, 52, 67, 71, 71, 11, 51, 48, 42, 57, 16, 43, 58, 29, 58, 8, 20, 24, 25, 15, 84, 61, 78, 53, 49, 39, 66, 75, 6, 51, 72, 9, 13, 49, 79, 45, 21, 1, 2, 63, 20, 17, 67, 39, 45, 86, 46, 26, 19, 70, 2, 64, 2}, 0},
	{"500", 3, []int64{1, 17, 80, 68, 5, 5, 58, 17, 38, 81, 26, 44, 38, 6, 12, 11, 37, 67, 70, 16, 19, 35, 71, 16, 32, 45, 7, 39, 2, 14, 16, 78, 82, 5, 18, 86, 61, 37, 12, 8, 27, 90, 13, 26, 57, 24, 36, 4, 52, 67, 71, 71, 11, 51, 48, 42, 57, 16, 43, 58, 29, 58, 8, 20, 24, 25, 15, 84, 61, 78, 53, 49, 39, 66, 75, 6, 51, 72, 9, 13, 49, 79, 45, 21, 1, 2, 63, 20, 17, 67, 39, 45, 86, 46, 26, 19, 70, 2, 64, 2, 79, 78, 51, 28, 53, 87, 85, 14, 68, 55, 78, 78, 5, 32, 9, 57, 85, 71, 76, 11, 9, 25, 17, 4, 32, 42, 74, 64, 5, 47, 65, 83, 34, 77, 72, 49, 73, 66, 24, 13, 82, 11, 90, 86, 4, 8, 53, 88, 40, 38, 8, 48, 24, 76, 13, 56, 79, 86, 29, 83, 4, 3, 37, 38, 42, 19, 48, 24, 46, 71, 36, 38, 81, 88, 85, 46, 57, 47, 43, 7, 85, 50, 16, 70, 87, 29, 35, 75, 24, 63, 67, 28, 28, 13, 27, 69, 83, 36, 54, 39, 16, 52, 38, 58, 49, 32, 13, 15, 79, 55, 73, 35, 66, 89, 14, 62, 79, 11, 46, 64, 73, 74, 1, 62, 86, 79, 40, 79, 24, 4, 79, 1, 17, 26, 58, 65, 19, 32, 79, 59, 86, 62, 55, 23, 22, 31, 84, 10, 41, 1, 73, 75, 74, 36, 47, 70, 76, 48, 20, 62, 13, 8, 62, 29, 85, 82, 3, 65, 23, 44, 34, 71, 67, 88, 3, 50, 28, 49, 59, 30, 49, 3, 15, 85, 90, 23, 26, 76, 70, 45, 9, 45, 14, 70, 35, 60, 23, 90, 34, 46, 43, 29, 78, 71, 79, 42, 30, 16, 52, 50, 8, 63, 52, 22, 57, 14, 6, 82, 89, 37, 88, 7, 81, 11, 38, 26, 32, 61, 77, 27, 68, 81, 56, 17, 61, 44, 58, 52, 21, 20, 11, 28, 82, 24, 11, 10, 37, 16, 1, 87, 53, 50, 55, 5, 22, 3, 82, 53, 25, 68, 79, 54, 58, 44, 70, 80, 49, 89, 41, 70, 70, 13, 59, 61, 37, 70, 70, 35, 47, 32, 84, 9, 81, 48, 66, 12, 12, 19, 26, 88, 87, 15, 13, 16, 20, 82, 6, 69, 43, 8, 10, 22, 21, 68, 83, 19, 9, 24, 15, 56, 18, 8, 26, 8, 18, 1, 72, 81, 72, 7, 79, 68, 21, 1, 45, 3, 45, 12, 71, 87, 20, 42, 18, 2, 19, 62, 72, 28, 48, 86, 45, 65, 56, 70, 72, 73, 33, 15, 63, 14, 22, 13, 43, 4, 66, 87, 6, 72, 61, 38, 68, 80, 79, 47, 43, 60, 19, 24, 49, 28, 71, 3, 2, 36, 34, 35, 18, 66, 50, 43, 79, 71, 55, 31, 74, 82, 28, 80, 63, 88, 79, 2, 39, 68, 49, 43, 89, 29, 28, 9}, 0},
	{"1000", 3, []int64{1, 17, 80, 68, 5, 5, 58, 17, 38, 81, 26, 44, 38, 6, 12, 11, 37, 67, 70, 16, 19, 35, 71, 16, 32, 45, 7, 39, 2, 14, 16, 78, 82, 5, 18, 86, 61, 37, 12, 8, 27, 90, 13, 26, 57, 24, 36, 4, 52, 67, 71, 71, 11, 51, 48, 42, 57, 16, 43, 58, 29, 58, 8, 20, 24, 25, 15, 84, 61, 78, 53, 49, 39, 66, 75, 6, 51, 72, 9, 13, 49, 79, 45, 21, 1, 2, 63, 20, 17, 67, 39, 45, 86, 46, 26, 19, 70, 2, 64, 2, 79, 78, 51, 28, 53, 87, 85, 14, 68, 55, 78, 78, 5, 32, 9, 57, 85, 71, 76, 11, 9, 25, 17, 4, 32, 42, 74, 64, 5, 47, 65, 83, 34, 77, 72, 49, 73, 66, 24, 13, 82, 11, 90, 86, 4, 8, 53, 88, 40, 38, 8, 48, 24, 76, 13, 56, 79, 86, 29, 83, 4, 3, 37, 38, 42, 19, 48, 24, 46, 71, 36, 38, 81, 88, 85, 46, 57, 47, 43, 7, 85, 50, 16, 70, 87, 29, 35, 75, 24, 63, 67, 28, 28, 13, 27, 69, 83, 36, 54, 39, 16, 52, 38, 58, 49, 32, 13, 15, 79, 55, 73, 35, 66, 89, 14, 62, 79, 11, 46, 64, 73, 74, 1, 62, 86, 79, 40, 79, 24, 4, 79, 1, 17, 26, 58, 65, 19, 32, 79, 59, 86, 62, 55, 23, 22, 31, 84, 10, 41, 1, 73, 75, 74, 36, 47, 70, 76, 48, 20, 62, 13, 8, 62, 29, 85, 82, 3, 65, 23, 44, 34, 71, 67, 88, 3, 50, 28, 49, 59, 30, 49, 3, 15, 85, 90, 23, 26, 76, 70, 45, 9, 45, 14, 70, 35, 60, 23, 90, 34, 46, 43, 29, 78, 71, 79, 42, 30, 16, 52, 50, 8, 63, 52, 22, 57, 14, 6, 82, 89, 37, 88, 7, 81, 11, 38, 26, 32, 61, 77, 27, 68, 81, 56, 17, 61, 44, 58, 52, 21, 20, 11, 28, 82, 24, 11, 10, 37, 16, 1, 87, 53, 50, 55, 5, 22, 3, 82, 53, 25, 68, 79, 54, 58, 44, 70, 80, 49, 89, 41, 70, 70, 13, 59, 61, 37, 70, 70, 35, 47, 32, 84, 9, 81, 48, 66, 12, 12, 19, 26, 88, 87, 15, 13, 16, 20, 82, 6, 69, 43, 8, 10, 22, 21, 68, 83, 19, 9, 24, 15, 56, 18, 8, 26, 8, 18, 1, 72, 81, 72, 7, 79, 68, 21, 1, 45, 3, 45, 12, 71, 87, 20, 42, 18, 2, 19, 62, 72, 28, 48, 86, 45, 65, 56, 70, 72, 73, 33, 15, 63, 14, 22, 13, 43, 4, 66, 87, 6, 72, 61, 38, 68, 80, 79, 47, 43, 60, 19, 24, 49, 28, 71, 3, 2, 36, 34, 35, 18, 66, 50, 43, 79, 71, 55, 31, 74, 82, 28, 80, 63, 88, 79, 2, 39, 68, 49, 43, 89, 29, 28, 9, 56, 8, 11, 57, 44, 44, 1, 61, 72, 50, 65, 60, 82, 82, 1, 28, 73, 80, 69, 46, 39, 57, 47, 77, 86, 57, 81, 46, 85, 18, 54, 50, 25, 26, 68, 68, 32, 31, 1, 13, 42, 65, 72, 34, 56, 72, 61, 1, 61, 39, 8, 9, 57, 54, 47, 53, 73, 89, 60, 67, 16, 24, 79, 41, 49, 56, 70, 80, 48, 70, 2, 90, 7, 74, 33, 24, 17, 55, 24, 40, 55, 31, 10, 21, 47, 19, 35, 29, 17, 5, 57, 85, 80, 45, 35, 38, 63, 66, 80, 20, 8, 81, 19, 14, 26, 13, 37, 5, 29, 23, 44, 83, 53, 15, 66, 9, 33, 62, 89, 12, 28, 56, 6, 17, 62, 2, 55, 86, 67, 44, 16, 36, 86, 86, 49, 74, 61, 48, 78, 89, 32, 83, 44, 84, 7, 19, 55, 2, 42, 53, 13, 70, 70, 18, 86, 42, 71, 12, 37, 47, 55, 14, 83, 13, 62, 3, 86, 32, 12, 73, 82, 43, 27, 35, 89, 33, 15, 53, 34, 57, 67, 8, 36, 47, 77, 83, 50, 57, 5, 86, 66, 59, 10, 20, 33, 33, 74, 28, 26, 86, 62, 17, 90, 88, 14, 88, 83, 28, 12, 78, 46, 41, 48, 43, 87, 34, 36, 8, 1, 40, 3, 28, 60, 64, 47, 3, 6, 30, 82, 31, 77, 16, 10, 77, 13, 23, 36, 57, 12, 48, 7, 20, 50, 54, 62, 46, 87, 7, 15, 49, 8, 17, 76, 68, 43, 84, 32, 10, 24, 75, 41, 10, 90, 12, 48, 65, 86, 84, 31, 7, 3, 37, 78, 14, 52, 50, 21, 49, 18, 35, 59, 26, 51, 45, 55, 3, 90, 48, 65, 23, 32, 67, 85, 32, 78, 4, 58, 73, 49, 50, 41, 13, 87, 29, 26, 48, 78, 46, 58, 57, 80, 27, 44, 41, 33, 60, 5, 32, 17, 69, 17, 11, 45, 11, 4, 84, 66, 61, 66, 25, 20, 69, 37, 68, 7, 63, 78, 46, 18, 7, 12, 8, 33, 18, 10, 27, 77, 66, 59, 56, 7, 75, 66, 51, 47, 31, 45, 22, 1, 72, 8, 72, 50, 45, 12, 18, 69, 51, 63, 48, 57, 37, 55, 52, 16, 26, 78, 2, 54, 46, 57, 60, 82, 84, 20, 38, 24, 26, 22, 76, 60, 29, 58, 71, 35, 31, 89, 13, 81, 23, 61, 47, 21, 77, 8, 36, 65, 86, 38, 28, 3, 56, 87, 85, 50, 68, 84, 35, 56, 15, 21, 25, 6, 40, 57, 40, 70, 55, 15, 22, 40, 37, 68, 60, 23, 38, 58, 87, 85, 57, 24, 87, 22, 72, 43, 33, 50, 37, 30, 15, 13, 50, 1, 18, 51, 57, 20, 82, 74, 86, 13, 23, 32, 42, 44, 54, 79, 63, 13, 35, 29, 88, 32, 13, 70, 36, 45, 81, 72, 74, 5, 47, 85, 57, 26, 45, 23, 45, 88, 6, 40, 10, 80, 33, 14, 86, 87, 2, 58, 61}, 0},
}

// func TestGeoTrips(t *testing.T) {
// 	for _, tc := range testCases {
// 		t.Run(tc.name, func(t *testing.T) {
// 			got := GeoTrips(tc.arr, tc.r)
// 			if got != tc.want {
// 				t.Errorf("%v found %d triplets; wanted %d", tc.arr, got, tc.want)
// 			}
// 		})
// 	}
// }
func TestNaiveCount(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := naiveCount(tc.arr, tc.r)
			if got != tc.want {
				t.Errorf("%v found %d triplets; wanted %d", tc.arr, got, tc.want)
			}
		})
	}
}

func TestTreeCount(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := treeCount(tc.arr, tc.r)
			if got != tc.want {
				t.Errorf("%v found %d triplets; wanted %d", tc.arr, got, tc.want)
			}
		})
	}
}

func TestPathCount(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := pathCount(tc.arr, tc.r)
			if got != tc.want {
				t.Errorf("%v found %d triplets; wanted %d", tc.arr, got, tc.want)
			}
		})
	}
}

func TestSplitMap(t *testing.T) {
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := splitMap(tc.arr, tc.r)
			if got != tc.want {
				t.Errorf("%v found %d triplets; wanted %d", tc.arr, got, tc.want)
			}
		})
	}
}

var result int64

func BenchmarkGeoTrips(b *testing.B) {
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			var res int64
			for i := 0; i < b.N; i++ {
				res = GeoTrips(bm.arr, 3)
			}
			result = res
		})
	}
}

func BenchmarkNaiveCount(b *testing.B) {
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			var res int64
			for i := 0; i < b.N; i++ {
				res = naiveCount(bm.arr, 3)
			}
			result = res
		})
	}
}

func BenchmarkTreeCount(b *testing.B) {
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			var res int64
			for i := 0; i < b.N; i++ {
				res = treeCount(bm.arr, 3)
			}
			result = res
		})
	}
}

func BenchmarkPathCount(b *testing.B) {
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			var res int64
			for i := 0; i < b.N; i++ {
				res = pathCount(bm.arr, 3)
			}
			result = res
		})
	}
}

func BenchmarkSplitMap(b *testing.B) {
	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			var res int64
			for i := 0; i < b.N; i++ {
				res = splitMap(bm.arr, 3)
			}
			result = res
		})
	}
}
