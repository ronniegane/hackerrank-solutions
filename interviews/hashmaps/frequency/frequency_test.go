package frequency

import "testing"

type testCase struct {
	name string
	q    [][]int32
	want []int32
}

var testCases = []testCase{
	{"0", [][]int32{
		{1, 5},
		{1, 6},
		{3, 2},
		{1, 10},
		{1, 10},
		{1, 6},
		{2, 5},
		{3, 2},
	}, []int32{0, 1}},
	{"1", [][]int32{
		{3, 4},
		{2, 1003},
		{1, 16},
		{3, 1},
	}, []int32{0, 1}},
	{"2", [][]int32{
		{1, 3},
		{2, 3},
		{3, 2},
		{1, 4},
		{1, 5},
		{1, 5},
		{1, 4},
		{3, 2},
		{2, 4},
		{3, 2},
	}, []int32{0, 1, 1}},
}

func TestQueries(t *testing.T) {

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := Queries(tc.q)
			if len(got) != len(tc.want) {
				t.Fatalf("Output length %d, expected %d", len(got), len(tc.want))
			}
			for i := 0; i < len(tc.want); i++ {
				if got[i] != tc.want[i] {
					t.Errorf("Output line %d = %d; expected %d", i, got, tc.want)
				}
			}
		})
	}
}

func TestFreqMap(t *testing.T) {

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := FreqMap(tc.q)
			if len(got) != len(tc.want) {
				t.Fatalf("Output length %d, expected %d", len(got), len(tc.want))
			}
			for i := 0; i < len(tc.want); i++ {
				if got[i] != tc.want[i] {
					t.Errorf("Output line %d = %d; expected %d", i, got, tc.want)
				}
			}
		})
	}
}

var result []int32

var longQueue = [][]int32{
	{2, 93386},
	{3, 42986},
	{2, 1505},
	{1, 854},
	{2, 70810},
	{1, 175},
	{3, 97025},
	{3, 93017},
	{1, 962},
	{2, 89244},
	{2, 44323},
	{2, 51306},
	{1, 459},
	{2, 70658},
	{1, 433},
	{1, 869},
	{3, 51533},
	{1, 330},
	{2, 47761},
	{1, 352},
	{2, 17180},
	{2, 77520},
	{2, 52965},
	{2, 11134},
	{3, 3347},
	{1, 177},
	{1, 323},
	{1, 520},
	{3, 17761},
	{2, 34548},
	{1, 586},
	{2, 27500},
	{2, 77534},
	{1, 92},
	{2, 95705},
	{3, 64696},
	{1, 618},
	{3, 92730},
	{3, 74066},
	{2, 76930},
	{1, 327},
	{3, 18389},
	{1, 590},
	{2, 89136},
	{2, 89047},
	{1, 22},
	{3, 72356},
	{2, 56932},
	{3, 51351},
	{1, 471},
	{3, 97283},
	{1, 532},
	{3, 13990},
	{2, 66601},
	{3, 79666},
	{2, 33690},
	{2, 96777},
	{3, 36340},
	{1, 210},
	{3, 30891},
	{2, 87240},
	{1, 796},
	{1, 744},
	{1, 127},
	{1, 239},
	{1, 449},
	{1, 824},
	{2, 42855},
	{3, 79530},
	{1, 242},
	{1, 786},
	{1, 857},
	{3, 70982},
	{2, 64374},
	{1, 994},
	{3, 76382},
	{1, 749},
	{3, 39349},
	{1, 315},
	{3, 84099},
	{1, 820},
	{3, 46950},
	{1, 983},
	{1, 163},
	{1, 904},
	{1, 1},
	{1, 853},
	{3, 43032},
	{1, 694},
	{1, 62},
	{3, 73923},
	{3, 4933},
	{2, 38208},
	{3, 48666},
	{1, 413},
	{1, 447},
	{3, 35466},
	{1, 588},
	{2, 94653},
	{3, 14996},
	{3, 828},
	{3, 30791},
	{1, 854},
	{3, 71810},
	{3, 11517},
	{1, 199},
	{2, 48192},
	{3, 44265},
	{1, 900},
	{2, 97859},
	{2, 44716},
	{1, 72},
	{2, 61161},
	{3, 13699},
	{2, 46585},
	{3, 91064},
	{1, 52},
	{2, 86437},
	{3, 34096},
	{2, 12744},
	{2, 70850},
	{2, 24372},
	{2, 34030},
	{2, 25411},
	{2, 89390},
	{3, 36442},
	{2, 60857},
	{2, 24857},
	{1, 30},
	{1, 512},
	{2, 39853},
	{3, 18209},
	{2, 2654},
	{3, 49058},
	{1, 20},
	{1, 172},
	{3, 25256},
	{2, 54564},
	{1, 438},
	{1, 509},
	{2, 52423},
	{3, 19505},
	{2, 97579},
	{3, 13584},
	{2, 49556},
	{3, 44164},
	{3, 21000},
	{1, 609},
	{2, 46953},
	{3, 71448},
	{2, 73704},
	{1, 156},
	{2, 95820},
	{3, 7734},
	{2, 59566},
	{1, 564},
	{3, 60528},
	{1, 777},
	{3, 42772},
	{1, 910},
	{2, 92287},
	{1, 978},
	{1, 119},
	{1, 294},
	{3, 48036},
	{1, 491},
	{2, 25464},
	{3, 89644},
	{3, 57054},
	{2, 253},
	{3, 63152},
	{1, 830},
	{1, 760},
	{2, 60731},
	{1, 766},
	{3, 69315},
	{1, 248},
	{1, 118},
	{3, 13923},
	{2, 68200},
	{1, 566},
	{2, 3980},
	{1, 357},
	{3, 76738},
	{3, 28066},
	{2, 78274},
	{3, 94653},
	{2, 88595},
	{1, 51},
	{2, 37425},
	{3, 82856},
	{3, 23689},
	{3, 36402},
	{1, 976},
	{3, 34982},
	{3, 84438},
	{1, 466},
	{2, 60447},
	{3, 90435},
	{1, 872},
	{3, 60700},
	{3, 53587},
	{2, 97052},
	{1, 812},
	{1, 672},
	{3, 69169},
	{3, 66127},
	{2, 51918},
	{1, 287},
	{1, 403},
	{1, 472},
	{1, 204},
	{2, 382},
	{1, 180},
	{1, 942},
	{1, 450},
	{1, 454},
	{1, 595},
	{3, 33396},
	{1, 505},
	{3, 68371},
	{3, 16252},
	{3, 72193},
	{1, 775},
	{3, 11579},
	{2, 23528},
	{3, 5564},
	{2, 9396},
	{1, 328},
	{3, 95999},
}

func BenchmarkQueries(b *testing.B) {
	var res []int32
	for i := 0; i < b.N; i++ {
		res = Queries(longQueue)
	}
	result = res
}

func BenchmarkFreqMap(b *testing.B) {
	var res []int32
	for i := 0; i < b.N; i++ {
		res = FreqMap(longQueue)
	}
	result = res
}
